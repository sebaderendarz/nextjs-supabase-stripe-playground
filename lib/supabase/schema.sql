--
-- Note: You may need to reorder statements before creating the schema
--


--
-- Name: create_profile_for_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_profile_for_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$begin
  insert into public.profile(id, email)
  values(new.id, new.email);

  return new;
end;$$;


ALTER FUNCTION public.create_profile_for_user() OWNER TO postgres;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: lesson; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.lesson (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    title text,
    description text
);


ALTER TABLE public.lesson OWNER TO postgres;

--
-- Name: lesson_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.lesson ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.lesson_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: premium_content; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.premium_content (
    id bigint NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    video_url text
);


ALTER TABLE public.premium_content OWNER TO postgres;

--
-- Name: premium_content_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

ALTER TABLE public.premium_content ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME public.premium_content_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: profile; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.profile (
    id uuid NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    is_subscribed boolean DEFAULT false,
    "interval" text,
    stripe_customer text,
    email text
);


ALTER TABLE public.profile OWNER TO postgres;

--
-- Data for Name: lesson; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.lesson (id, created_at, title, description) FROM stdin;
1	2023-05-30 07:18:31.816724+00	Day 1 - Introduction	In this lesson we're gonna catch up.
2	2023-05-30 07:19:25.392881+00	Day 2 - Setup	In this lesson we're gonna put batteries into the toy.
\.


--
-- Data for Name: premium_content; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.premium_content (id, created_at, video_url) FROM stdin;
1	2023-05-31 15:33:13.082602+00	https://www.youtube.com/watch?v=O-IBNhqVKQM
2	2023-05-31 15:33:47.16026+00	https://www.youtube.com/watch?v=LGYe_TT35L8
\.


--
-- Data for Name: profile; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.profile (id, created_at, is_subscribed, "interval", stripe_customer, email) FROM stdin;
841a56a9-565f-4ecc-9cec-356cfa280b84	2023-06-02 16:01:40.1178+00	t	month	cus_O0bdo5781NZX3v	derendarz99@gmail.com
\.


--
-- Name: lesson_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.lesson_id_seq', 2, true);


--
-- Name: premium_content_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.premium_content_id_seq', 1, false);


--
-- Name: lesson lesson_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.lesson
    ADD CONSTRAINT lesson_pkey PRIMARY KEY (id);


--
-- Name: premium_content premium_content_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.premium_content
    ADD CONSTRAINT premium_content_pkey PRIMARY KEY (id);


--
-- Name: profile profile_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profile
    ADD CONSTRAINT profile_pkey PRIMARY KEY (id);


--
-- Name: profile get_stripe_customer; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER get_stripe_customer AFTER INSERT ON public.profile FOR EACH ROW EXECUTE FUNCTION supabase_functions.http_request('https://d329-2a00-f41-80c1-70ca-2bd-775b-3091-8f1a.eu.ngrok.io/api/create-stripe-customer', 'POST', '{"Content-type":"application/json"}', '{"API_ROUTE_SECRET":"your-api-route-secret-from-env-local"}', '1000');


--
-- Name: premium_content premium_content_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.premium_content
    ADD CONSTRAINT premium_content_id_fkey FOREIGN KEY (id) REFERENCES public.lesson(id);


--
-- Name: profile profile_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profile
    ADD CONSTRAINT profile_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id);


--
-- Name: lesson anyone can select lessons; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "anyone can select lessons" ON public.lesson FOR SELECT USING (true);


--
-- Name: lesson; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.lesson ENABLE ROW LEVEL SECURITY;

--
-- Name: premium_content; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.premium_content ENABLE ROW LEVEL SECURITY;

--
-- Name: profile; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.profile ENABLE ROW LEVEL SECURITY;

--
-- Name: premium_content subscribed users can select premium content; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "subscribed users can select premium content" ON public.premium_content FOR SELECT USING ((EXISTS ( SELECT 1
   FROM public.profile
  WHERE ((auth.uid() = profile.id) AND (profile.is_subscribed = true)))));


--
-- Name: profile user can select their profile; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "user can select their profile" ON public.profile FOR SELECT USING ((auth.uid() = id));


--
-- Name: FUNCTION create_profile_for_user(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.create_profile_for_user() TO anon;
GRANT ALL ON FUNCTION public.create_profile_for_user() TO authenticated;
GRANT ALL ON FUNCTION public.create_profile_for_user() TO service_role;


--
-- Name: TABLE lesson; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.lesson TO anon;
GRANT ALL ON TABLE public.lesson TO authenticated;
GRANT ALL ON TABLE public.lesson TO service_role;


--
-- Name: SEQUENCE lesson_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.lesson_id_seq TO anon;
GRANT ALL ON SEQUENCE public.lesson_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.lesson_id_seq TO service_role;


--
-- Name: TABLE premium_content; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.premium_content TO anon;
GRANT ALL ON TABLE public.premium_content TO authenticated;
GRANT ALL ON TABLE public.premium_content TO service_role;


--
-- Name: SEQUENCE premium_content_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.premium_content_id_seq TO anon;
GRANT ALL ON SEQUENCE public.premium_content_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.premium_content_id_seq TO service_role;


--
-- Name: TABLE profile; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.profile TO anon;
GRANT ALL ON TABLE public.profile TO authenticated;
GRANT ALL ON TABLE public.profile TO service_role;


--
-- PostgreSQL database dump complete
--
